Сначала приемник: потом источник
Код:
метка: инструкция операнды; комментарий

-------------------------------------------------------------------------------
Директивы:
section <имя секции>
extern - символ внешний (вне текущего модуля)
global - объявляет символы доступными извне модуля

section .text
extern printf, scanf
global _start
_start: ; some code

align n - выравнивает следующую инструкцию на n байт (типо память - массив)
(там есть адреса, берет адрес и прибавляет к нему n байт)
align 4

-------------------------------------------------------------------------------
Example:

section .data
0) db 1
1) align 4
4) ...

-------------------------------------------------------------------------------
dX expression - размещение данных в памяти
db, dw, dd, dq, ddq, do
db - байт (8 бит)
dw - машинное слово (16 бит)
dd - двойное машинное слово (32 бита)
dq - 64 бита
ddq, do - 128 бита

db 12, 34 ; 0x0C 0x22
dd 0x1234 ; 0x34 0x12 0x00 0x00
db 'abc' ; 0x41 0x42 0x43

resX N (resb, resw)
резервирует неинициализированное место для N переменных
.bss секция

buffer: resb 256

label equ expression
константное значение для символа

string: dp 'Hello', 0 ; строка Hello, которая закончена нулем
length: equ $ - string ; длина строки

-------------------------------------------------------------------------------

IA-32 (что бы это ни было) - 32-битная архитектура intel

Модель: есть регистры, флаги, память и стек.
Память - массив с адресацией

Главные регистры: EAX - "Accumalator register"
EBX - "Base register"
ECX - "Count register"
EDX - "Data register"

Можно обращаться по частям (ну круто же =))

EBX = 0xDEADBEEF
BX = 0xBEEF
BH = 0xBE
BL = 0xEF

[--------] - EAX
[    ----] - AX
[    --  ] - AH
[      --] - AL

Индексные регистры:
ESI - "Source index"
EDI - "Destination index"
EBP - "Base pointer"
ESP - "Stack pointer"

EIP - указатель текущей инструкции

Сегментные регистры:
CS
DS
ES
FS
GS
SS

Флаги (EFLAGS - их регистр):
Флаги обощначают какое-то состояние
CF - беззнаковый перенос
ZF - флаг нуля
SF - флаг знака (отрицательный (ну очевидно же))
OF - знаковый перенос

Флаги устанавливаются согласно результату после арифметических действий
Потом условный переход по флагам

-------------------------------------------------------------------------------

Адресация в YASM/NASM

x - значение
[x] - адрес в памяти

Есть стек, его размер растет вниз (ну стек же все-таки)
ESP - указатель на стек (Stack Pointer)
push - поместить в стек
pop - забрать из стека
А вообще стек в ассемблере рулит

-------------------------------------------------------------------------------


